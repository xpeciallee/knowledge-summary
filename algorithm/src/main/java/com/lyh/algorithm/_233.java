package com.lyh.algorithm;

public class _233 {
    //给定一个整数 n，计算所有小于等于 n 的非负整数中数字 1 出现的个数。

    /**
     * 1、我们将每个数以位数进行分类，首先计算每一位可以出现多少个一，（一个三位数，我们先计算个位上1出现的次数，然后计算十位上1出现的次数，最后计算百位上1出现的次数）然后进行累加，得到小于n的数出现1的次数之和。
     * <p>
     * 2、将某位上的数字按大小不同进行分类，分析出不同的计算方法。
     * <p>
     * 例子:
     * <p>
     * 以算百位上1为例子:   假设百位上是0, 1, 和 >=2 三种情况:
     * <p>
     * case 1: n=3141092, a= 31410, b=92. 计算百位上1的个数应该为 3141 *100 次.
     * <p>
     * case 2: n=3141192, a= 31411, b=92. 计算百位上1的个数应该为 3141 *100 + (92+1) 次.
     * <p>
     * case 3: n=3141592, a= 31415, b=92. 计算百位上1的个数应该为 (3141+1) *100 次.
     * <p>
     * 以上三种情况可以用 一个公式概括:
     * <p>
     * (a + 8) / 10 * m + (a % 10 == 1) ? (b + 1):0;
     *
     * @param n
     * @return
     */
    public int countDigitOne(int n) {
        int count = 0;
        for (long k = 1; k <= n; k *= 10) {
            long r = n / k;
            long m = n % k;
            // sum up the count of ones on every place k
            count += (r + 8) / 10 * k + (r % 10 == 1 ? m + 1 : 0);
        }
        return count;

    }
}
